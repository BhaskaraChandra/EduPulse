from pydantic import BaseModel
import requests

questionsServiceUrl = "https://epsvc-qt.onrender.com/"
userssServiceUrl = "https://epsvc-u.onrender.com/"

localService = False
if localService:
    questionsServiceUrl = "http://localhost:9117/"
    userssServiceUrl = "http://localhost:9117/"

import os
questionsServiceUrl = os.environ.get('qsvc',questionsServiceUrl)
userssServiceUrl = os.environ.get('usvc',userssServiceUrl)

headers = {'Content-Type': 'application/json'}

def authenticate_user(username, password):
    api="users/authenticate"
    response = requests.post(userssServiceUrl+api, headers=headers, json={"userEmail": username, "password": password})
    response.raise_for_status()  # Raise an exception for HTTP errors
    return response.json()
def createTenant(tenantName):
    api="tenants/"
    response = requests.post(userssServiceUrl+api, headers=headers, json={"tenantName": tenantName})
    response.raise_for_status()  # Raise an exception for HTTP errors
    return response.json()

def getTenants():
    api="tenants/"
    response = requests.get(userssServiceUrl+api, headers=headers)
    response.raise_for_status()  # Raise an exception for HTTP errors
    return response.json() 

class User(BaseModel):
    userEmail: str
    userName: str
    userGrade: str =""
    userLevel: str = ""
    profilePic: str = ""
    userGroup: str = ""
    userType: str
    tenantName: str
    password: str = ""

def createUser(username, email, hashed_password, tenantName, userType):
    userObj = User(userEmail=email, userName=username, password=hashed_password, tenantName=tenantName, userType=userType)
    api="users/"
    print("Dbg: Createuser api about to be called ")
    response = requests.post(userssServiceUrl+api, headers=headers, json=userObj.model_dump())
    response.raise_for_status()  # Raise an exception for HTTP errors
    print("Createuser Response:",response.json())
    return response.json()
    pass

def addTenantAdmin(username, email, hashed_password, tenantName) :
    return createUser(username, email, hashed_password, tenantName,"tenantadmin")
    pass

def getUsersForTenantAdmin(adminUser_id):
    api="users/"
    #api = f"users/{adminUser_id}"
    response = requests.get(userssServiceUrl+api, headers=headers,params={"tenant_admin_email": adminUser_id})
    response.raise_for_status()  # Raise an exception for HTTP errors
    return response.json() 

    pass
#############################################################################################
