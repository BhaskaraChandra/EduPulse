<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EduPulse</title>
    <style>
        /* General Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-size: large;
            font-family: 'Arial', sans-serif;
        }

        body {
            display: flex;
            height: 100vh;
            background: #f4f4f4;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 250px;
            /* height: 100%; */
            height: 100vh;
            background: #2c3e50;
            position: fixed;
            padding-top: 60px;
            box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.2);
            overflow-y: auto;
        }

        .sidebar a {
            display: block;
            color: white;
            padding: 15px 25px;
            text-decoration: none;
            font-size: 14px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: 0.3s;
        }

        .sidebar a:hover {
            background: #34495e;
        }

        /* Content Area */
        .content {
            flex: 1;
            padding: 20px;
            margin-left: 250px;
        }
        .dynamic-content {
            
            width: 300px;
            padding: 45px;
            margin-top: 10px;
            background: white;
            border-radius: 16px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
    
        h2 {
            color: #2c3e50;
        }

        p {
            color: #555;
            line-height: 1.6;
        }
        .create-tenant-btn {
            /*TODO:seems like this is unused. verify and cleanup*/
            display: inline-block;
            /* background: #27ae60; */
            background: #2c3e50;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 20px;
            transition: 0.3s;
        }
        .create-superadmin-btn{
            display: inline-block;
            background: #27ae60;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 20px;
            transition: 0.3s;

        }
        .add-tenant-btn{
            display: inline-block;
            background: blueviolet;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 20px;
            transition: 0.3s;

        }

        .create-tenant-btn:hover {
            /* background: #219150; */
            background: #2c3e50;
        }

        /* Popup Modal */
         .popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            width: 300px;
            text-align: center;
        } 
         

        .popup form {
            display: flex;
            flex-direction: column;
        }

        .popup input {
            margin: 6px 0;
            /* margin-top: 10px; */
            /* margin-bottom: 5px; */
            padding: 11px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .popup button {
            /* background: #27ae60; */
            background: #FB641B;
            color: white;
            border: none;
            margin-top: 4px;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
        }

        .popup button:hover {
            background: #219150;
        }

        .close-btn {
            background: #e74c3c;
            margin-top: 10px;
        }

        .close-btn:hover {
            background: #c0392b;
        }
        .adminpopup {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        transition: 0.3s;
        width: auto;
    }     

    .adminpopup:hover {
        background: #2980b9;
    }
    /* Style for select dropdown */
    .popup select {
        width: 100%;
        padding: 10px;
        margin-bottom: 8px;
        margin-top: 6px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background: white;
        font-size: 12px;
        color: #555;
        appearance: none; /* Removes default arrow in some browsers */
        -webkit-appearance: none;
        -moz-appearance: none;
    }

    /* Style for dropdown arrow */
    .popup select:focus {
        outline: none;
        border-color: #27ae60;
    }

    /* Optional: Style dropdown options */
    .popup select option {
        background: white;
        color: #333;
        padding: 10px;
    }
/*view pop*/
.viewpop {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        margin-left: 5px;
        transition: 0.3s;
        width: auto;
        margin-bottom: 5px;
        gap: 2px;
    }     

    .viewpop:hover {
        background: #2980b9;
    }
    .viewpo {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 10px;
        margin-left: 5px;
        transition: 0.3s;
        width: auto;
        margin-bottom: 5px;
        gap: 2px;
    }     

    .viewpo:hover {
        background: #2980b9;
    }
      .viewpopus {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            width: 300px;
            text-align: center;
            z-index: 1000;
        } 
        .viewpopu {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            width: 300px;
            text-align: center;
            z-index: 1000;
        } 
        .close-btns {
            background: none;
            border: none;
            font-size: 24px;
            color: #666;
            cursor: pointer;
            padding: 0;
            margin: 0;
            transition: color 0.3s;
        }

        .close-btns:hover {
            color: #e74c3c;
            background: none;
        }
        .viewpopups button {
            /* background: #27ae60; */
            background: #FB641B;
            color: white;
            border: none;
            margin-top: 4px;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
        }
        

</style>
</head>
<body>


    <div class="sidebar">
        {% if option != "users" %}  
            <a href="{% url 'sidebar_option' 'tenant' %}">Tenants</a>
        {% endif %}
        <a href="{% url 'logout' %}" class="logout-btn">Logout</a>
    </div>

    <div class="content">
        <h2>Super Administrator</h2>
    
        {% if option == "tenant" %}
            <a href="#" id="openPopup" class="add-tenant-btn">Add Tenant</a>
        <!--h2>debug: </h2-->
            <h2>Total Tenants: {{ user.total_tenants }}</h2>
            {% if tenant_data %}
                <table border="1" cellpadding="10" cellspacing="0" style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr style="background: #2c3e50; color: white;">
                            <th>Tenant Name</th>
                            <th>Admin Count</th>
                            <th>User Count</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for tenant in tenant_data %}
                            <tr style="text-align: center; background: white;">
                                <td>{{ tenant.tenantName }}</td>
                                <td>{{ tenant.adminCount }}<button class="viewpop">view</button></td>
                                <td>{{ tenant.userCount }}<button class="viewpo">view</button></td>
                                <td><button class="adminpopup">Create Admin</button></td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p class="no-data">Details not found</p>
            {% endif %}
        {% endif %}
    </div>

    <div class="popup" id="addTenantPopupForm" style="display: none;">
        <h2>Create Tenant</h2>
        <form method="POST" action="{% url 'SubmitTenant' %}">
            {% csrf_token %}
            <input type="hidden" name="option" value="tenant">
            <input type="text" name="tenantName" placeholder="Tenant Name" required>
            <button type="submit">Add Tenant</button>
            <button type="button" class="close-btn">Cancel</button>
        </form>
    </div>
    <div class="popup" id="addTenantAdminPopupForm" style="display: none;">
        <h2>Create Tenant Admin For</h2>
        <form method="POST" action="{% url 'SubmitTenantAdmin' %}">
            {% csrf_token %}
            <input type="hidden" name="option" value="tenantadmin">
            <input type="text" name="username" placeholder="Username" required>
            <input type="email" name="email" value="abcd@gmail.com" placeholder="Email">
            <input type="password" name="password" value="11433434" placeholder="Password">
            <input type="hidden" id = "tenantNameHiddenField" name="tenant" value='${tenantName}'>
            <button type="submit">Add Tenant Admin</button>
            <button type="button" class="close-btn">Cancel</button>
        </form>
    </div>
    <div class="viewpopus" id="viewadmins" style="display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
            <h2 style="margin: 0;"></h2>
            <button type="button" class="close-btns" aria-label="Close" style="background: none; border: none; font-size: 24px; color: #666; cursor: pointer; padding: 0; margin: 0;">×</button>
        </div>
        <table border="1" cellpadding="10" cellspacing="0" style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr style="background: #2c3e50; color: white;">
                    <th>Admin Name</th>
                    <th>Admin Email</th>
                </tr>
            </thead>
            <tbody id="adminDetailsforTenants">
                <!-- Admin details will be dynamically populated here -->
            </tbody>
        </table>
    </div>
    <div class="viewpopu" id="viewusers" style="display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
            <h2 style="margin: 0;"></h2>
            <button type="button" class="close-btns" aria-label="Close" style="background: none; border: none; font-size: 24px; color: #666; cursor: pointer; padding: 0; margin: 0;">×</button>
        </div>
        <div style="margin-bottom: 15px;">
            <select id="groupSelect" style="width: 100%; padding: 8px; margin-bottom: 10px;">
                <option value="">Select a group</option>
            </select>
        </div>
        <table border="1" cellpadding="10" cellspacing="0" style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr style="background: #2c3e50; color: white;">
                    <th>User Email</th>
                    <th>User Group</th>
                </tr>
            </thead>
            <tbody id="userDetailsforTenants">
                <!-- Admin details will be dynamically populated here -->
            </tbody>
        </table>
    </div>
<script>
document.addEventListener("DOMContentLoaded", function () {
    function showAddTenantPopup() {
        const addTenantPopup = document.getElementById("addTenantPopupForm");
        addTenantPopup.style.display = "block";
        addTenantPopup.querySelector(".close-btn").addEventListener("click", function () {
            addTenantPopup.style.display = "none";
        });
    }

    function showAddTenantAdminPopup(tenantName) {
        const addTenantAdminPopup = document.getElementById("addTenantAdminPopupForm");
        const popupTitle = addTenantAdminPopup.querySelector("h2");
        popupTitle.textContent = `Create Admin For ${tenantName}`;
        const tenantNameHiddenField = document.getElementById("tenantNameHiddenField");
        tenantNameHiddenField.value = tenantName;
        addTenantAdminPopup.style.display = "block";
        addTenantAdminPopup.querySelector(".close-btn").addEventListener("click", function () {
            addTenantAdminPopup.style.display = "none";
        });
    }

    function viewAdminPopup(tenantName) {
        const viewAdminPopup = document.getElementById("viewadmins");
        const popupTitle = viewAdminPopup.querySelector("h2");
        popupTitle.textContent = `Admin details for ${tenantName}`;
        viewAdminPopup.style.display = "block";
        viewAdminPopup.querySelector(".close-btns").addEventListener("click", function () {
            viewAdminPopup.style.display = "none";
        });
    }
    function viewUsersPopup(tenantName) {
        const viewAdminPopup = document.getElementById("viewsusers");
        const popupTitle = viewAdminPopup.querySelector("h2");
        popupTitle.textContent = `user details for ${tenantName}`;
        viewAdminPopup.style.display = "block";
        viewAdminPopup.querySelector(".close-btns").addEventListener("click", function () {
            viewAdminPopup.style.display = "none";
        });
    }

    // Open popup when clicking on "Create Tenant", "Create Superadmin", "Add Tenant"
    document.querySelectorAll("#openPopup").forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();

            if (button.classList.contains("create-superadmin-btn")) {
                alert("Currently, creating superadmin is not supported.");
            } else if (button.classList.contains("add-tenant-btn")) {
                showAddTenantPopup();
            }
        });
    });

    // Open popup when clicking on "Admin" button inside tenants table
    document.querySelectorAll(".adminpopup").forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            // Find the corresponding tenant name from the table row
            const row = this.closest("tr"); // Get the closest table row
            const tenantName = row.querySelector("td:first-child").textContent.trim(); // Get the first column (tenant name)
            showAddTenantAdminPopup(tenantName);
        });
    });

    document.querySelectorAll(".viewpop").forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            const row = this.closest("tr");
            const tenantName = row.querySelector("td:first-child").textContent.trim();
            admins = postAPIRequest("{% url 'getTenantadminForTenant' %}", {"tenantName":tenantName}) 
            // Call the API with tenant name
            .then((admins) => {
                //alert(admins);
                // Get the table body where admin details will be displayed
                var adminDetailsTableBody = document.getElementById("adminDetailsforTenants");
                // Clear any existing rows in the table
                adminDetailsTableBody.innerHTML = "";
                // If admins is not an array, wrap it in an array
                if (!Array.isArray(admins)) {
                    admins = [admins];
                }
                // Iterate over the admins and create table rows for each
                admins.forEach(function(admin) {
                    var row = document.createElement("tr");
                    var nameCell = document.createElement("td");
                    var emailCell = document.createElement("td");
                    nameCell.textContent = admin.username || admin.userName || admin.name || "";
                    emailCell.textContent = admin.email || admin.userEmail || "";
                    row.appendChild(nameCell);
                    row.appendChild(emailCell);
                    adminDetailsTableBody.appendChild(row);
                });
                viewAdminPopup(tenantName);
            })
            .catch((error) => {
                console.log(error);
                // Handle the error
            });
            //alert(admins);

        });
    });//End Adding events for view admin popup
    curTenantName = "";
    const groupSelect = document.getElementById("groupSelect");
    // Add event listener for group selection
    groupSelect.addEventListener("change", function() 
    {
        const selectedGroup = this.value;
        if (selectedGroup) {
            tenantName = curTenantName;
            const userDetailsTableBody = document.getElementById("userDetailsforTenants");
            userDetailsTableBody.innerHTML = "";
            //alert(tenantName+"/"+selectedGroup);
            postAPIRequest("{% url 'usersForTheTenant' %}", {
                "tenantName": tenantName,
                "groupName": selectedGroup
            })
            .then((users) => {
                const userDetailsTableBody = document.getElementById("userDetailsforTenants");
                userDetailsTableBody.innerHTML = "";
                
                if (!Array.isArray(users)) {
                    users = [users];
                }
                
                users.forEach(user => {
                    const row = document.createElement("tr");
                    const emailCell = document.createElement("td");
                    const groupCell = document.createElement("td");
                    
                    emailCell.textContent = user.email || user.userEmail || "";
                    groupCell.textContent = user.groupname || user.userGroup || selectedGroup;
                    
                    row.appendChild(emailCell);
                    row.appendChild(groupCell);
                    userDetailsTableBody.appendChild(row);
                });
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to load users for: ' + tenantName+"/"+selectedGroup+ error.message);
            });//End Post API Request
        } else {
            const userDetailsTableBody = document.getElementById("userDetailsforTenants");
            userDetailsTableBody.innerHTML = `
                <tr>
                    <td colspan="2" style="text-align: center;">Please select a group</td>
                </tr>
            `;
        }
    });//End Adding event listener for group selection on the popup.


    document.querySelectorAll(".viewpo").forEach(button => {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            const row = this.closest("tr");
            const tenantName = row.querySelector("td:first-child").textContent.trim();
            curTenantName = tenantName;
            const userDetailsTableBody = document.getElementById("userDetailsforTenants");
            userDetailsTableBody.innerHTML = "";
            //alert(tenantName);
           // First get all groups for the tenant
            postAPIRequest("{% url 'getGroupsForTenant' %}", {"tenantName": tenantName})
            .then((groups) => {
                const groupSelect = document.getElementById("groupSelect");
                groupSelect.innerHTML = '<option value="">Select a group</option>';
                
                let groupList = Array.isArray(groups) ? groups : (groups.groups || []);
                groupList.forEach(group => {
                    const option = document.createElement("option");
                    option.value = group;
                    option.textContent = group;
                    groupSelect.appendChild(option);
                });

                // Show the popup
                const viewUsersPopup = document.getElementById("viewusers");
                const popupTitle = viewUsersPopup.querySelector("h2");
                popupTitle.textContent = `Users for ${tenantName}`;
                viewUsersPopup.style.display = "block";
                // Add close button functionality
                viewUsersPopup.querySelector(".close-btns").addEventListener("click", function () {
                    const groupSelect = document.getElementById("groupSelect");
                    groupSelect.innerHTML = '<option value="">Select a group</option>';
                    viewUsersPopup.style.display = "none";
                });
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to load groups: ' + error.message);
            });
        });
    });
});

function postAPIRequest(api, input) {
  return new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', api, true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
    xhr.send(JSON.stringify(input));
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          var admins = JSON.parse(xhr.responseText);
          resolve(admins);
        } else {
          reject(xhr.statusText);
        }
      }
    };
  });
}


// Helper function to get the CSRF token from cookies
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

</script>              
</body>
</html>
